#ifndef OSMIUM_GEOM_RAPID_GEOJSON_DOCUMENT_HPP
#define OSMIUM_GEOM_RAPID_GEOJSON_DOCUMENT_HPP

/*

This file is part of Osmium (http://osmcode.org/libosmium).

Copyright 2013-2017 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <cstddef>

#include "rapidjson/document.h"

#include <osmium/geom/coordinates.hpp>
#include <osmium/geom/factory.hpp>

namespace osmium {

    namespace geom {

        namespace detail {

            /**
             * A geometry factory implementation that returns rapidjson::Document
             * objects for geometry values.
             *
             * Useful for doing subsequent structural manipulation on the JSON
             * values returned, for example injecting Tag data into the structure
             * or including the elements in other GeoJSON structures.
             *
             * RapidJSON documents can then be serialized using one of the RapidJSON
             * Stream/Writer implementations. See http://rapidjson.org/ for more info.
             */
            class RapidGeoJSONDocumentFactoryImpl {
                rapidjson::Document m_document;
                rapidjson::Value m_coordinates;
                rapidjson::Value m_polygon;
                rapidjson::Value m_ring;
            public:

                using point_type        = rapidjson::Document;
                using linestring_type   = rapidjson::Document;
                using polygon_type      = rapidjson::Document;
                using multipolygon_type = rapidjson::Document;
                using ring_type         = rapidjson::Document;

                RapidGeoJSONDocumentFactoryImpl(int /* srid */) :
                    m_coordinates(rapidjson::kArrayType),
                    m_polygon(rapidjson::kArrayType),
                    m_ring(rapidjson::kArrayType)

                {}

                /* Point */

                // { "type": "Point", "coordinates": [100.0, 0.0] }
                point_type make_point(const osmium::geom::Coordinates& xy) const {
                    rapidjson::Document document;
                    document.SetObject();
                    rapidjson::Document::AllocatorType& allocator = document.GetAllocator();

                    document.AddMember("type", "Point", allocator);

                    rapidjson::Value coordinates(rapidjson::kArrayType);
                    coordinates.PushBack(xy.x, allocator);
                    coordinates.PushBack(xy.y, allocator);

                    document.AddMember("coordinates", coordinates, allocator);

                    return document;
                }

                /* LineString */

                // { "type": "LineString", "coordinates": [ [100.0, 0.0], [101.0, 1.0] ] }
                void linestring_start() {
                    m_document = rapidjson::Document();
                    m_document.SetObject();
                    m_coordinates = rapidjson::Value(rapidjson::kArrayType);
                    rapidjson::Document::AllocatorType& allocator = m_document.GetAllocator();

                    m_document.AddMember("type", "LineString", allocator);
                }

                void linestring_add_location(const osmium::geom::Coordinates& xy) {
                    rapidjson::Document::AllocatorType& allocator = m_document.GetAllocator();
                    rapidjson::Value point(rapidjson::kArrayType);
                    point.PushBack(xy.x, allocator);
                    point.PushBack(xy.y, allocator);

                    m_coordinates.PushBack(point, allocator);
                }

                linestring_type linestring_finish(size_t /* num_points */) {
                    m_document.AddMember("coordinates", m_coordinates, m_document.GetAllocator());

                    rapidjson::Document document;
                    document.CopyFrom(m_document, document.GetAllocator());
                    return document;
                }

                /* Polygon */

                // { "type": "Polygon", "coordinates": [[[100.0, 0.0], [101.0, 1.0]]] }
                // Naive Polygon -- Only handles single outer ring (this works for OSM Polygon cases)
                void polygon_start() {
                    m_document = rapidjson::Document();
                    m_document.SetObject();
                    m_coordinates = rapidjson::Value(rapidjson::kArrayType);

                    rapidjson::Document::AllocatorType& allocator = m_document.GetAllocator();

                    rapidjson::Value outer_ring = rapidjson::Value(rapidjson::kArrayType);
                    m_coordinates.PushBack(outer_ring, allocator);

                    m_document.AddMember("type", "Polygon", allocator);
                }

                void polygon_add_location(const osmium::geom::Coordinates& xy) {
                    rapidjson::Value& outer_ring = m_coordinates[0];
                    rapidjson::Document::AllocatorType& allocator = m_document.GetAllocator();

                    rapidjson::Value point(rapidjson::kArrayType);
                    point.PushBack(xy.x, allocator);
                    point.PushBack(xy.y, allocator);

                    outer_ring.PushBack(point, allocator);
                }

                polygon_type polygon_finish(size_t /* num_points */) {
                    m_document.AddMember("coordinates", m_coordinates, m_document.GetAllocator());

                    rapidjson::Document document;
                    document.CopyFrom(m_document, document.GetAllocator());
                    return document;
                }

                /* MultiPolygon */

                void multipolygon_start() {
                    m_document = rapidjson::Document();
                    m_document.SetObject();
                    m_coordinates = rapidjson::Value(rapidjson::kArrayType);
                    m_document.AddMember("type", "MultiPolygon", m_document.GetAllocator());
                }

                void multipolygon_polygon_start() {
                    m_polygon = rapidjson::Value(rapidjson::kArrayType);
                }

                void multipolygon_polygon_finish() {
                    m_coordinates.PushBack(m_polygon, m_document.GetAllocator());
                }

                void multipolygon_outer_ring_start() {
                    m_ring = rapidjson::Value(rapidjson::kArrayType);
                }

                void multipolygon_outer_ring_finish() {
                    m_polygon.PushBack(m_ring, m_document.GetAllocator());
                }

                void multipolygon_inner_ring_start() {
                    m_ring = rapidjson::Value(rapidjson::kArrayType);
                }

                void multipolygon_inner_ring_finish() {
                    m_polygon.PushBack(m_ring, m_document.GetAllocator());
                }

                void multipolygon_add_location(const osmium::geom::Coordinates& xy) {
                    rapidjson::Document::AllocatorType& allocator = m_document.GetAllocator();

                    rapidjson::Value point(rapidjson::kArrayType);
                    point.PushBack(xy.x, allocator);
                    point.PushBack(xy.y, allocator);

                    m_ring.PushBack(point, allocator);
                }

                multipolygon_type multipolygon_finish() {
                    m_document.AddMember("coordinates", m_coordinates, m_document.GetAllocator());

                    rapidjson::Document document;
                    document.CopyFrom(m_document, document.GetAllocator());
                    return document;
                }

            }; // class RapidGeoJSONDocumentFactoryImpl

        } // namespace detail

        template <typename TProjection = IdentityProjection>
        using RapidGeoJSONDocumentFactory = GeometryFactory<detail::RapidGeoJSONDocumentFactoryImpl, TProjection>;

    } // namespace geom

} // namespace osmium

#endif // OSMIUM_GEOM_RAPID_GEOJSON_DOCUMENT_HPP
