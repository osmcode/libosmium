#ifndef OSMIUM_MEMORY_BUILDER_HPP
#define OSMIUM_MEMORY_BUILDER_HPP

/*

This file is part of Osmium (http://osmcode.org/osmium).

Copyright 2013 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <cstring>
#include <new>
#include <osmium/memory/buffer.hpp>

namespace osmium {

    namespace memory {

        class Builder {

            Buffer& m_buffer;
            Builder* m_parent;
            osmium::memory::Item* m_item;

            Builder(const Builder&) = delete;
            Builder(Builder&&) = delete;

            Builder& operator=(const Builder&) = delete;
            Builder& operator=(Builder&&) = delete;

        protected:

            Builder(Buffer& buffer, Builder* parent, size_t size, item_type item_type) :
                m_buffer(buffer),
                m_parent(parent),
                m_item(reinterpret_cast<osmium::memory::Item*>(m_buffer.get_space(size))) {
                assert(buffer.is_aligned());
                new (m_item) osmium::memory::Item(size, item_type);
                if (m_parent) {
                    m_parent->add_size(size);
                }
            }

            ~Builder() = default;

            osmium::memory::Item& item() {
                return *m_item;
            }

            void add_size(uint32_t size) {
                m_item->add_size(size);
                if (m_parent) {
                    m_parent->add_size(size);
                }
            }

        public:

            uint32_t size() const {
                return m_item->size();
            }

            void add_item(const osmium::memory::Item* item) {
                std::memcpy(m_buffer.get_space(item->padded_size()), item, item->padded_size());
                add_size(item->padded_size());
            }

            /**
             * Add padding if needed.
             *
             * Adds size to parent, but not to self!
             */
            void add_padding() {
                size_t padding = align_bytes - (size() % align_bytes);
                if (padding != align_bytes) {
                    memset(m_buffer.get_space(padding), 0, padding);
                    if (m_parent) {
                        m_parent->add_size(padding);
                        assert(m_parent->size() % align_bytes == 0);
                    }
                }
            }

            /**
             * Reserve space for an object of class T in buffer and return
             * pointer to it.
             */
            template <class T>
            T* get_space_for() {
                assert(m_buffer.is_aligned());
                assert(sizeof(T) % align_bytes == 0);
                return reinterpret_cast<T*>(m_buffer.get_space(sizeof(T)));
            }

            /**
             * Append \0-terminated string to buffer.
             */
            size_t append(const char* str) {
                size_t length = std::strlen(str) + 1;
                std::memcpy(m_buffer.get_space(length), str, length);
                return length;
            }

            void add_string(const char* str) {
                size_t len = std::strlen(str) + 1;
                *get_space_for<size_t>() = len;
                append(str);
                add_size(sizeof(size_t) + len);

                size_t padding = align_bytes - (len % align_bytes);
                if (padding != align_bytes) {
                    memset(m_buffer.get_space(padding), 0, padding);
                    add_size(padding);
                }
                assert(m_buffer.is_aligned());
            }

        }; // Builder

        template <class T>
        class ObjectBuilder : public Builder {

        public:

            ObjectBuilder(Buffer& buffer, Builder* parent=nullptr) :
                Builder(buffer, parent, sizeof(T), item_traits<T>::itemtype) {

                // First we initialize an empty object of class T in the buffer using its constructor.
                // This will initialize everything in there thats specific to type T.
                new (&item()) T();

                // Then we initialize an Item on top of that with the right size and item_type.
                new (&item()) osmium::memory::Item(sizeof(T), item_traits<T>::itemtype);
            }

            T& object() {
                return static_cast<T&>(item());
            }

        }; // class ObjectBuilder

    } // namespace memory

} // namespace osmium

#endif // OSMIUM_MEMORY_BUILDER_HPP
